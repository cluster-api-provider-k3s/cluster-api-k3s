---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
        - 10.42.0.0/16
    services:
      cidrBlocks:
        - 10.43.0.0/16
    serviceDomain: cluster.local
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: ProxmoxCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta2
    kind: KThreesControlPlane
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: ProxmoxCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  controlPlaneEndpoint:
    host: ${CONTROL_PLANE_ENDPOINT_IP}
    port: 6443
  ipv4Config:
    addresses: ${NODE_IP_RANGES}
    prefix: ${IP_PREFIX}
    gateway: ${GATEWAY}
  dnsServers: ${DNS_SERVERS}
  allowedNodes: ${ALLOWED_NODES:=[]}
---
kind: ProxmoxMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      sourceNode: "${PROXMOX_SOURCENODE}"
      templateID: ${PROXMOX_TEMPLATE_VMID}
      format: "qcow2"
      full: true
      numSockets: ${NUM_SOCKETS:=1}
      numCores: ${NUM_CORES:=2}
      memoryMiB: ${MEMORY_MIB:=2048}
      disks:
        bootVolume:
          disk: ${BOOT_VOLUME_DEVICE:=scsi0}
          sizeGb: ${BOOT_VOLUME_SIZE:=32}
      network:
        default:
          bridge: ${BRIDGE}
          model: virtio
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: ProxmoxMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
spec:
  template:
    spec:
      sourceNode: "${PROXMOX_SOURCENODE}"
      templateID: ${PROXMOX_TEMPLATE_VMID}
      format: "qcow2"
      full: true
      numSockets: ${NUM_SOCKETS:=1}
      numCores: ${NUM_CORES:=1}
      memoryMiB: ${MEMORY_MIB:=2048}
      disks:
        bootVolume:
          disk: ${BOOT_VOLUME_DEVICE:=scsi0}
          sizeGb: ${BOOT_VOLUME_SIZE:=32}
      network:
        default:
          bridge: ${BRIDGE}
          model: virtio
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta2
kind: KThreesControlPlane
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      kind: ProxmoxMachineTemplate
      name: "${CLUSTER_NAME}-control-plane"
  kthreesConfigSpec:
    serverConfig:
      # cloudProviderName: "external"
      disableCloudController: false
      disableComponents: ${K3S_DISABLE_COMPONENTS:=[]}
    agentConfig:
      nodeName: "{{ ds.meta_data.local_hostname }}"
      kubeletArgs:
        - "provider-id=proxmox://{{ ds.meta_data.instance_id }}"
    files:
      - path: /var/lib/rancher/k3s/server/manifests/kube-vip.yaml
        owner: root:root
        content: |
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: kube-vip
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"
            name: system:kube-vip-role
          rules:
            - apiGroups: [""]
              resources: ["services/status"]
              verbs: ["update"]
            - apiGroups: [""]
              resources: ["services", "endpoints"]
              verbs: ["list","get","watch", "update"]
            - apiGroups: [""]
              resources: ["nodes"]
              verbs: ["list","get","watch", "update", "patch"]
            - apiGroups: ["coordination.k8s.io"]
              resources: ["leases"]
              verbs: ["list", "get", "watch", "update", "create"]
            - apiGroups: ["discovery.k8s.io"]
              resources: ["endpointslices"]
              verbs: ["list","get","watch", "update"]
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: system:kube-vip-binding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:kube-vip-role
          subjects:
          - kind: ServiceAccount
            name: kube-vip
            namespace: kube-system
          ---
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            creationTimestamp: null
            labels:
              app.kubernetes.io/name: kube-vip-ds
              app.kubernetes.io/version: v0.8.7
            name: kube-vip-ds
            namespace: kube-system
          spec:
            selector:
              matchLabels:
                app.kubernetes.io/name: kube-vip-ds
            template:
              metadata:
                creationTimestamp: null
                labels:
                  app.kubernetes.io/name: kube-vip-ds
                  app.kubernetes.io/version: v0.8.7
              spec:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: node-role.kubernetes.io/master
                          operator: Exists
                      - matchExpressions:
                        - key: node-role.kubernetes.io/control-plane
                          operator: Exists
                containers:
                - args:
                  - manager
                  env:
                  - name: vip_arp
                    value: "true"
                  - name: vip_nodename
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  - name: vip_interface
                    value: ""
                  - name: address
                    value: ${CONTROL_PLANE_ENDPOINT_IP}
                  - name: port
                    value: ${CONTROL_PLANE_ENDPOINT_PORT="6443"}
                  - name: dns_mode
                    value: first
                  - name: cp_enable
                    value: "true"
                  - name: cp_namespace
                    value: kube-system
                  - name: svc_enable
                    value: "true"
                  - name: svc_leasename
                    value: plndr-svcs-lock
                  - name: vip_leaderelection
                    value: "true"
                  - name: vip_leasename
                    value: plndr-cp-lock
                  - name: vip_leaseduration
                    value: "5"
                  - name: vip_renewdeadline
                    value: "3"
                  - name: vip_retryperiod
                    value: "1"
                  - name: prometheus_server
                    value: :2112
                  - name: enableUPNP
                    value: "false"
                  image: ghcr.io/kube-vip/kube-vip:v0.8.7
                  imagePullPolicy: IfNotPresent
                  name: kube-vip
                  resources: {}
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                      - NET_RAW
                hostNetwork: true
                serviceAccountName: kube-vip
                tolerations:
                - effect: NoSchedule
                  operator: Exists
                - effect: NoExecute
                  operator: Exists
            updateStrategy: {}
    preK3sCommands:
      - mkdir -p /root/.ssh
      - chmod 700 /root/.ssh
      - echo "${VM_SSH_KEYS}" > /root/.ssh/authorized_keys
      - chmod 600 /root/.ssh/authorized_keys
  replicas: ${CONTROL_PLANE_MACHINE_COUNT=1}
  version: "${KUBERNETES_VERSION}"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
kind: KThreesConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
spec:
  template:
    spec:
      preK3sCommands:
        - mkdir -p /root/.ssh
        - chmod 700 /root/.ssh
        - echo "${VM_SSH_KEYS}" > /root/.ssh/authorized_keys
        - chmod 600 /root/.ssh/authorized_keys
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-worker"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT=1}
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        node-role.kubernetes.io/node: ""
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
          kind: KThreesConfigTemplate
          name: "${CLUSTER_NAME}-worker"
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
        kind: ProxmoxMachineTemplate
        name: "${CLUSTER_NAME}-worker"
